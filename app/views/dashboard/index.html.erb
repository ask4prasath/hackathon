<%= bootstrap_flash %>


<div class="main-content overWrittenPadding" xmlns="http://www.w3.org/1999/html">

<script type="text/javascript">
				var sample_notification;
					jQuery(document).ready(function($)
					{
					// Second row
					$('#pageviews-stats').dxBarGauge({
						startValue: -50,
						endValue: 50,
						baseValue: 0,
						values: [-21.3, 14.8, -30.9, 45.2],
						label: {
							customizeText: function (arg) {
								return arg.valueText + '%';
							}
						},
						//palette: 'ocean',
						palette: ['#68b828','#7c38bc','#0e62c7','#fcd036','#4fcdfc','#00b19d','#ff6264','#f7aa47'],
						margin : {
							top: 0
						}
					});

					var firstMonth = {
						dataSource: getFirstMonthViews(),
						argumentField: 'month',
						valueField: '2014',
						type: 'area',
						showMinMax: true,
						lineColor: '#68b828',
						minColor: '#68b828',
						maxColor: '#7c38bc',
						showFirstLast: false
					},
					secondMonth = {
						dataSource: getSecondMonthViews(),
						argumentField: 'month',
						valueField: '2014',
						type: 'splinearea',
						lineColor: '#68b828',
						minColor: '#68b828',
						maxColor: '#7c38bc',
						pointSize: 6,
						showMinMax: true,
						showFirstLast: false
					},
					thirdMonth = {
						dataSource: getThirdMonthViews(),
						argumentField: 'month',
						valueField: '2014',
						type: 'splinearea',
						lineColor: '#68b828',
						minColor: '#68b828',
						maxColor: '#7c38bc',
						pointSize: 6,
						showMinMax: true,
						showFirstLast: false
					};

					function getFirstMonthViews() {
						return [{ month: 1, 2014: 7341 },
						{ month: 2, 2014: 7016 },
						{ month: 3, 2014: 7202 },
						{ month: 4, 2014: 7851 },
						{ month: 5, 2014: 7481 },
						{ month: 6, 2014: 6532 },
						{ month: 7, 2014: 6498 },
						{ month: 8, 2014: 7191 },
						{ month: 9, 2014: 7596 },
						{ month: 10, 2014: 8057 },
						{ month: 11, 2014: 8373 },
						{ month: 12, 2014: 8636 }];
					};

					function getSecondMonthViews() {
						return [{ month: 1, 2014: 189742 },
						{ month: 2, 2014: 181623 },
						{ month: 3, 2014: 205351 },
						{ month: 4, 2014: 245625 },
						{ month: 5, 2014: 261319 },
						{ month: 6, 2014: 192786 },
						{ month: 7, 2014: 194752 },
						{ month: 8, 2014: 207017 },
						{ month: 9, 2014: 212665 },
						{ month: 10, 2014: 233580 },
						{ month: 11, 2014: 231503 },
						{ month: 12, 2014: 232824 }];
					};

					function getThirdMonthViews() {
						return [{ month: 1, 2014: 398},
						{ month: 2, 2014: 422},
						{ month: 3, 2014: 431},
						{ month: 4, 2014: 481},
						{ month: 5, 2014: 551},
						{ month: 6, 2014: 449},
						{ month: 7, 2014: 442},
						{ month: 8, 2014: 482},
						{ month: 9, 2014: 517},
						{ month: 10, 2014: 566},
						{ month: 11, 2014: 630},
						{ month: 12, 2014: 737}];
					};


					$('.first-month').dxSparkline(firstMonth);
					$('.second-month').dxSparkline(secondMonth);
					$('.third-month').dxSparkline(thirdMonth);


					// Realtime Network Stats
					var i = 0,
//						rns_values = [100,150],
//						rns2_values = [30,50],

						realtime_network_stats = [];

//					for(i=0; i<=4; i++)
//					{
//						realtime_network_stats.push({ id: i, x1: between(rns_values[0], rns_values[1]), x2: between(rns2_values[0], rns2_values[1]), x3: 21});
//					}

					$("#realtime-network-stats").dxChart({
						dataSource: realtime_network_stats,
						commonSeriesSettings: {
							argumentField: "id"
						},
						series: [
							{ valueField: "x3", name: "Invalid Events ", color: '#990033'},
                            { valueField: "x2", name: "Valid Events", color: '#006600'},
                            { valueField: "x1", name: "Total Events", color: '#3366CC'}
						],
//						legend: {
//							verticalAlignment: "bottom",
//							horizontalAlignment: "center"
//						},
//                        commonAxisSettings: {
//							label: {
//								visible: true
//							}
//						},
						legend: {
							visible: false
						},
						argumentAxis: {
                            type: 'numeric',
                            argumentType: 'string',
//                            categories: ["3 sec ago", "2 sec ago", "1 sec ago", "just now"],
                            position: "bottom",
                            grid: {
                                visible: true,
//                                width: 1,
                                color: '#f5f5f5'
                            },
                            label: {
                                visible: true
                            }
					    },
                        tooltip: {
                            enabled: true,
                            customizeTooltip: function (point) {
                                return {
                                    text: point.value   + " events"
                                };
                            }

                        },
                        palette: 'Soft',
                        valueAxis: {
                            label: {
                                visible: true
                            },
                            grid: { visible: true },
                            showZero: true
                        },
						animation: {
							enabled: false
						}
					}).data('iCount', 0);


					$('#network-realtime-gauge').dxCircularGauge({
						scale: {
							startValue: 0,
							endValue: 100,
							majorTick: {
								tickInterval: 25
							}
						},
						rangeContainer: {
							palette: 'pastel',
							width: 3,
							ranges: [
								{ startValue: 0, endValue: 25, color: "green" },
								{ startValue: 25, endValue: 50, color: "yellow" },
								{ startValue: 50, endValue: 75, color: "orange" },
								{ startValue: 75, endValue: 100, color: "red" },
							],
						},
						value: 10,
						valueIndicator: {
							offset: 10,
							color: '#7c38bc',
							type: 'triangleNeedle',
							spindleSize: 12
						}
					});

//					setInterval(function(){  networkRealtimeChartTick(100, 30); }, 1000);
//					setInterval(function(){ networkRealtimeGaugeTick(between(50,100)); }, 2000);
//					setInterval(function(){ networkRealtimeMBupdate(); }, 3000);

					// CPU Usage Gauge

					// Resize charts
					$(window).on('xenon.resize', function()
					{
						$("#realtime-network-stats").data("dxChart").render();
					});

				});

				function networkRealtimeChartTick(total_count, success_count, failure_count)
				{
					var $ = jQuery,
						i = 0,
                        tmpStack = [];


					var chart_data = $('#realtime-network-stats').dxChart('instance').option('dataSource');

					var count = $('#realtime-network-stats').data('iCount');

					$('#realtime-network-stats').data('iCount', count + 1);

                    for(i = 0; i < 6; i++) {
                        tmpStack.push(chart_data.pop())
                    }

                    $.each(tmpStack.reverse(), function(index, value) {
                        if(value != undefined) {
                            if(value["id"] === "4 sec ago") {
                            } else {
                                value["id"] =   5 - index  + ' sec ago'
                                chart_data.push(value)
                            }


                        }
                    });

                    if(tmpStack.length > 6) {
                        chart_data.shift()
                    }

					chart_data.push({id: 'just now', x1: parseInt(total_count), x2: parseInt(success_count), x3: parseInt(failure_count)});
					$('#realtime-network-stats').dxChart('instance').option('dataSource', chart_data);
				}

				function networkRealtimeGaugeTick(speed)
				{
					if(jQuery('#network-realtime-gauge').length == 0)
						return;

					var nr_gauge = jQuery('#network-realtime-gauge').dxCircularGauge('instance');

					nr_gauge.value(speed);
				}

				function networkRealtimeMBupdate()
				{
					var $el = jQuery("#network-mbs-packets");

					if($el.length == 0)
						return;

					var options = {
							useEasing : true,
							useGrouping : true,
							separator : ',',
							decimal : '.',
							prefix : '' ,
							suffix : ' events/s'
						},
						cntr = new countUp($el[0], parseFloat($el.text().replace('events/s')), between(1000,2500), 0, 1.5, options);

					cntr.start();
				}

				function between(randNumMin, randNumMax)
				{
					var randInt = Math.floor((Math.random() * ((randNumMax + 1) - randNumMin)) + randNumMin);

					return randInt;
				}
			</script>




<div class="row">
  <div class="col-sm-9">

    <div class="chart-item-bg">
      <div class="chart-label">
        <div id="network-mbs-packets" class="h2 text-purple text-bold" style="padding-left: 50px; padding-top: 30px;">Real Time</div>
      </div>
      <div class="chart-right-legend">
        <!--<div id="network-realtime-gauge" style="width: 170px; height: 140px"></div>-->
      </div>
      <div id="realtime-network-stats" style="height: 550px; padding: 20px;"></div>
    </div>
  </div>

  <div class="col-sm-3">

    <div class="xe-widget xe-counter">
      <center><div id="network-realtime-gauge" style="width: 170px; height: 140px"></div></center>
    </div>

    <div class="xe-widget xe-counter" data-count=".totalPerSec" data-from="0" data-to="0" data-duration="2">
      <div class="xe-icon">
        <i class="linecons-fire" style="background: #3366CC;"></i>
      </div>
      <div class="xe-label">
        <strong class="totalPerSec">0.0</strong>
        <span># of real time count</span>
      </div>
    </div>

    <div class="xe-widget xe-counter" data-count=".totalCount" data-from="0" data-to="0" data-duration="2">
      <div class="xe-icon">
        <i class="linecons-fire" style="background: #B8B800;"></i>
      </div>
      <div class="xe-label">
        <strong class="totalCount">0.0 events</strong>
        <span># of events</span>
      </div>
    </div>

    <div class="xe-widget xe-counter" data-count=".failureCount" data-from="0" data-to="0" data-duration="2">
      <div class="xe-icon">
        <i class="linecons-globe"></i>
      </div>
      <div class="xe-label">
        <strong class="successCount">0.0 events</strong>
        <span># of valid events</span>
      </div>
    </div>

    <div class="xe-widget xe-counter" data-count=".successCount" data-from="0" data-to="0" data-duration="2">
      <div class="xe-icon">
        <i class="linecons-trash" style="background: indianred;"></i>
      </div>
      <div class="xe-label">
        <strong class="failureCount">0.0 events</strong>
        <span># of invalid events</span>
      </div>
    </div>



  </div>
</div>

</div>



<section class="profile-env">

  <div class="row">
    <div class="col-sm-12">
      <!-- User timeline stories -->
      <section class="user-timeline-stories">

  <a href="/rules/feed">next page</a>

     </section>
        </div>
      </div>

</section>
